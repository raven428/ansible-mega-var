---
- name: Calculate destination file name
  ansible.builtin.set_fact:
    _meva_prof_name: >-
      {%- set prefix = '' -%}
      {%- set i_dest = i.dest | default('') -%}
      {%- set f_dest = f.dest | default('') -%}
      {%- if i_dest == '' and f_dest == '' -%}
        {{ notdefined |
        mandatory('Either i.dest or f.dest must be defined and non-empty') }}
      {%- elif not i_dest.startswith('/') and i_dest != '' -%}
        {{ notdefined |
        mandatory('i.dest must be an absolute path') }}
      {%- elif f_dest.startswith('/') and i_dest != ''  -%}
        {%- set prefix = '' -%}
      {%- elif i_dest != '' -%}
        {%- if i.archive | default(false) -%}
          {%- set prefix = i_dest | regex_replace('/*$', '') ~ '/' -%}
        {%- else -%}
          {%- set prefix = i_dest | dirname ~ '/' -%}
        {%- endif -%}
      {%- endif -%}
      {%- if f_dest == '' -%}
        {{ prefix ~ f.name }}
      {%- elif f_dest is search('/$') -%}
        {{ prefix ~ f_dest | regex_replace('/*$', '') ~ '/' ~ f.name | basename }}
      {%- else -%}
        {{ prefix ~ f_dest }}
      {%- endif -%}

- name: Debug
  ansible.builtin.debug:
    msg:
      - "i.dest: [{{ i.dest | default('') }}]"
      - "f.dest: [{{ f.dest | default('') }}]"
      - "f.name: [{{ f.name | default('') }}]"
      - "_meva_dest_path: {{ _meva_dest_path }}"
      - "_meva_prof_name: {{ _meva_prof_name }}"

- name: Ensure destination directory exist
  ansible.builtin.file:
    state: "directory"
    path: "{{ _meva_prof_name | dirname }}"
    mode: "{{ f.dir_mode | default(omit) }}"
    owner: "{{ f.dir_owner | default(omit) }}"
    group: "{{ f.dir_group | default(omit) }}"
    force: "{{ f.dir_force | default(_download_archive.changed) }}"
    access_time: "{{ f.dir_atime | default(omit) }}"
    access_time_format: "{{ f.dir_atime_format | default(omit) }}"
    modification_time: "{{ f.dir_mtime | default(omit) }}"
    modification_time_format: "{{ f.dir_mtime_format | default(omit) }}"
    attributes: "{{ f.dir_attributes | default(omit) }}"
    follow: "{{ f.dir_follow | default(omit) }}"
    selevel: "{{ f.dir_selevel | default(omit) }}"
    serole: "{{ f.dir_serole | default(omit) }}"
    setype: "{{ f.dir_setype | default(omit) }}"
    seuser: "{{ f.dir_seuser | default(omit) }}"
  notify: "{{ f.notify | default(omit) }}"

- name: Propagate unpacked files
  ansible.builtin.copy:
    src: >-
      {%- if i.archive | default(false) -%}
        {{ _meva_dest_path ~ '/' ~ f.name }}
      {%- else -%}
        {{ f.src }}
      {%- endif -%}
    dest: "{{ _meva_prof_name }}"
    force: "{{ f.force | default(_download_archive.changed) }}"
    owner: "{{ f.owner | default(omit) }}"
    group: "{{ f.group | default(omit) }}"
    mode: "{{ f.file_mode | default('0644') }}"
    attributes: "{{ f.attributes | default(omit) }}"
    follow: "{{ f.follow | default(omit) }}"
    backup: "{{ f.backup | default(omit) }}"
    checksum: "{{ f.checksum | default(omit) }}"
    decrypt: "{{ f.decrypt | default(omit) }}"
    directory_mode: "{{ f.dir_mode | default(omit) }}"
    local_follow: "{{ f.local_follow | default(omit) }}"
    selevel: "{{ f.selevel | default(omit) }}"
    serole: "{{ f.serole | default(omit) }}"
    setype: "{{ f.setype | default(omit) }}"
    seuser: "{{ f.seuser | default(omit) }}"
    unsafe_writes: "{{ f.unsafe_writes | default(omit) }}"
    validate: "{{ f.validate | default(omit) }}"
  notify: "{{ f.notify | default(omit) }}"
  register: copy_result

- name: Set owner, group and mode
  ansible.builtin.file:
    path: "{{ _meva_prof_name }}"
    mode: "{{ f.file_mode | default(omit) }}"
    owner: "{{ f.owner | default(omit) }}"
    group: "{{ f.group | default(omit) }}"
    force: "{{ f.force | default(_download_archive.changed) }}"
    access_time: "{{ f.access_time | default(omit) }}"
    access_time_format: "{{ f.access_time_format | default(omit) }}"
    modification_time: "{{ f.modification_time | default(omit) }}"
    modification_time_format: "{{ f.modification_time_format | default(omit) }}"
    attributes: "{{ f.attributes | default(omit) }}"
    follow: "{{ f.follow | default(omit) }}"
    selevel: "{{ f.selevel | default(omit) }}"
    serole: "{{ f.serole | default(omit) }}"
    setype: "{{ f.setype | default(omit) }}"
    seuser: "{{ f.seuser | default(omit) }}"
  notify: "{{ f.notify | default(omit) }}"
  when: "'size' in copy_result"
